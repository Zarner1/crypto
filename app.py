import streamlit as st
import pandas as pd
import numpy as np
from ta.momentum import RSIIndicator
from ta.trend import MACD, SMAIndicator, EMAIndicator
import joblib
import os

st.set_page_config(page_title="BTC Fiyat YÃ¶nÃ¼ Tahmini", layout="wide")

# --- GÃœNCELLENMÄ°Åž Yollar ---
MODEL_YOLU = "randomforest_rfe_model.pkl" 
OLCEKLEYICI_YOLU = "scaler.pkl"
OZNITELIKLER_YOLU = "rfe_selected_features.pkl" 
OLCEKLEYICI_SUTUNLARI_YOLU = "features_columns_for_scaler.pkl"


GECMIS_VERI_YOLU = "btc_verisi.csv"
GEREKLI_GECMIS_GUN_SAYISI = 40 

@st.cache_resource
def model_varliklarini_yukle():
    yollar = {
        "Model": MODEL_YOLU,
        "Ã–lÃ§ekleyici": OLCEKLEYICI_YOLU,
        "RFE Ã–zellikleri": OZNITELIKLER_YOLU, # AÃ§Ä±klama gÃ¼ncellendi
        "Ã–lÃ§ekleyici SÃ¼tunlarÄ±": OLCEKLEYICI_SUTUNLARI_YOLU
    }
    yuklenen_varliklar = {}
    hepsi_mevcut = True
    for ad, yol in yollar.items():
        if not os.path.exists(yol):
            st.error(f"{ad} dosyasÄ± bulunamadÄ±: {yol}")
            hepsi_mevcut = False
    if not hepsi_mevcut:
        return None

    try:
        yuklenen_varliklar["model"] = joblib.load(MODEL_YOLU)
        yuklenen_varliklar["olcekleyici"] = joblib.load(OLCEKLEYICI_YOLU)
        yuklenen_varliklar["rfe_oznitelik_listesi"] = joblib.load(OZNITELIKLER_YOLU) # Anahtar gÃ¼ncellendi
        yuklenen_varliklar["olcekleyici_sutun_listesi"] = joblib.load(OLCEKLEYICI_SUTUNLARI_YOLU)
        return yuklenen_varliklar
    except Exception as e:
        st.error(f"Model varlÄ±klarÄ± yÃ¼klenirken hata: {e}")
        return None

@st.cache_data
def gecmis_veriyi_yukle(dosya_yolu):
    if not os.path.exists(dosya_yolu):
        st.error(f"GeÃ§miÅŸ veri dosyasÄ± bulunamadÄ±: {dosya_yolu}")
        return None
    try:
        df = pd.read_csv(dosya_yolu, usecols=['Open', 'Close', 'Volume'])
        if len(df) < GEREKLI_GECMIS_GUN_SAYISI:
            st.warning(f"GeÃ§miÅŸ veri dosyasÄ±nda yetersiz satÄ±r var. En az {GEREKLI_GECMIS_GUN_SAYISI} gÃ¼n gerekli, {len(df)} satÄ±r bulundu.")
        return df
    except Exception as e:
        st.error(f"GeÃ§miÅŸ veri yÃ¼klenirken hata oluÅŸtu: {e}")
        return None

def teknik_indikatorleri_hesapla(giris_df):
    df = giris_df.copy()
    if 'Close' not in df.columns:
        st.error("DataFrame indikatÃ¶r hesaplamasÄ± iÃ§in 'Close' sÃ¼tununu iÃ§ermelidir.")
        return pd.DataFrame()
    df['Close'] = pd.to_numeric(df['Close'], errors='coerce')
    if df['Close'].isnull().any():
        st.error("Close sÃ¼tunu, sayÄ±sal olmayan deÄŸerler iÃ§eriyor veya dÃ¶nÃ¼ÅŸtÃ¼rme sonrasÄ± NaN oldu.")
        return pd.DataFrame()

    if len(df) < 14: st.warning("RSI iÃ§in yetersiz veri."); df["RSI"] = np.nan
    else: df["RSI"] = RSIIndicator(close=df["Close"], window=14).rsi()

    if len(df) < 26: st.warning("MACD iÃ§in yetersiz veri."); df["MACD"] = np.nan; df["Signal"] = np.nan
    else:
        macd_indicator = MACD(close=df["Close"], window_slow=26, window_fast=12, window_sign=9)
        df["MACD"] = macd_indicator.macd()
        df["Signal"] = macd_indicator.macd_signal()

    if len(df) < 20: st.warning("SMA20 iÃ§in yetersiz veri."); df["SMA20"] = np.nan
    else: df["SMA20"] = SMAIndicator(close=df["Close"], window=20).sma_indicator()

    if len(df) < 20: st.warning("EMA20 iÃ§in yetersiz veri."); df["EMA20"] = np.nan
    else: df["EMA20"] = EMAIndicator(close=df["Close"], window=20).ema_indicator()

    return df

varliklar = model_varliklarini_yukle()
tam_gecmis_veri = gecmis_veriyi_yukle(GECMIS_VERI_YOLU)

st.title("Bitcoin (BTC/USD) Fiyat YÃ¶nÃ¼ Tahmini")

if varliklar is None or tam_gecmis_veri is None:
    st.error("Uygulama baÅŸlatÄ±lamadÄ±. LÃ¼tfen yukarÄ±daki hata mesajlarÄ±nÄ± kontrol edin ve gerekli dosyalarÄ±n mevcut olduÄŸundan emin olun.")
    if tam_gecmis_veri is not None and len(tam_gecmis_veri) < GEREKLI_GECMIS_GUN_SAYISI:
         st.error(f"GeÃ§miÅŸ veri dosyasÄ±nda {len(tam_gecmis_veri)} satÄ±r var ancak indikatÃ¶r hesaplamalarÄ± iÃ§in en az {GEREKLI_GECMIS_GUN_SAYISI} gÃ¼n verisi Ã¶nerilir.")
    st.stop()

model = varliklar["model"]
olcekleyici = varliklar["olcekleyici"]
# --- DeÄŸiÅŸken adÄ± gÃ¼ncellendi ---
RFE_SECILMIS_OZNITELIKLER = varliklar["rfe_oznitelik_listesi"]
# --- DeÄŸiÅŸken adÄ± gÃ¼ncellendi sonu ---
OLCEKLEYICI_GIRIS_SUTUNLARI = varliklar["olcekleyici_sutun_listesi"]

st.sidebar.header("GÃ¼ncel GÃ¼nÃ¼n Verilerini Girin")
st.sidebar.markdown("LÃ¼tfen tahmin yapmak istediÄŸiniz gÃ¼nÃ¼n AÃ§Ä±lÄ±ÅŸ (Open), KapanÄ±ÅŸ (Close) ve Hacim (Volume) deÄŸerlerini girin.")

varsayilan_acilis = tam_gecmis_veri['Open'].iloc[-1] if not tam_gecmis_veri.empty else 40000.0
varsayilan_kapanis = tam_gecmis_veri['Close'].iloc[-1] if not tam_gecmis_veri.empty else 40500.0
varsayilan_hacim = tam_gecmis_veri['Volume'].iloc[-1] if not tam_gecmis_veri.empty else 50000000000.0

guncel_acilis = st.sidebar.number_input("BugÃ¼nkÃ¼ AÃ§Ä±lÄ±ÅŸ (Open)", value=float(varsayilan_acilis), step=100.0, format="%.2f")
guncel_kapanis = st.sidebar.number_input("BugÃ¼nkÃ¼ KapanÄ±ÅŸ (Close)", value=float(varsayilan_kapanis), step=100.0, format="%.2f")
guncel_hacim = st.sidebar.number_input("BugÃ¼nkÃ¼ Hacim (Volume)", value=float(varsayilan_hacim), step=1000000.0, format="%.0f")

if st.sidebar.button("Tahmin Et", type="primary"):
    if len(tam_gecmis_veri) < GEREKLI_GECMIS_GUN_SAYISI -1 :
         st.error(f"Tahmin iÃ§in yetersiz geÃ§miÅŸ veri. En az {GEREKLI_GECMIS_GUN_SAYISI-1} geÃ§miÅŸ gÃ¼n verisi gereklidir. Mevcut: {len(tam_gecmis_veri)}")
    else:
        try:
            son_gecmis = tam_gecmis_veri[['Open', 'Close', 'Volume']].iloc[-(GEREKLI_GECMIS_GUN_SAYISI - 1):].copy()

            guncel_veri_sozlugu = {
                'Open': [guncel_acilis],
                'Close': [guncel_kapanis],
                'Volume': [guncel_hacim]
            }
            guncel_df_satiri = pd.DataFrame(guncel_veri_sozlugu)

            birlestirilmis_df = pd.concat([son_gecmis, guncel_df_satiri], ignore_index=True)
            if len(birlestirilmis_df) < GEREKLI_GECMIS_GUN_SAYISI:
                st.error(f"BirleÅŸtirilmiÅŸ veri {len(birlestirilmis_df)} satÄ±r iÃ§eriyor, ancak {GEREKLI_GECMIS_GUN_SAYISI} gerekli. Bu bir hata olmalÄ±.")
                st.stop()

            indikatorlu_df = teknik_indikatorleri_hesapla(birlestirilmis_df)

            if indikatorlu_df.empty:
                st.error("Teknik indikatÃ¶rler hesaplanamadÄ±. LÃ¼tfen girdi verilerini kontrol edin.")
                st.stop()

            tahmin_icin_guncel_oznitelikler = indikatorlu_df.iloc[-1:].copy()

            eksik_olcekleyici_sutunlari = [sutun for sutun in OLCEKLEYICI_GIRIS_SUTUNLARI if sutun not in tahmin_icin_guncel_oznitelikler.columns]
            if eksik_olcekleyici_sutunlari:
                st.error(f"Ä°ndikatÃ¶r hesaplamasÄ± sonrasÄ± Ã¶lÃ§ekleyici iÃ§in beklenen sÃ¼tunlar eksik: {', '.join(eksik_olcekleyici_sutunlari)}. "
                         f"Mevcut sÃ¼tunlar: {tahmin_icin_guncel_oznitelikler.columns.tolist()}")
                st.stop()

            olceklenecek_df = tahmin_icin_guncel_oznitelikler[OLCEKLEYICI_GIRIS_SUTUNLARI]

            if olceklenecek_df.isnull().values.any():
                 st.error("Hesaplanan son gÃ¼n verilerinde (indikatÃ¶rler dahil) NaN deÄŸerler bulundu. Bu genellikle yetersiz geÃ§miÅŸ veriden veya hesaplama hatasÄ±ndan kaynaklanÄ±r. LÃ¼tfen verileri kontrol edin.")
                 st.write("Hesaplanan son satÄ±r (indikatÃ¶rler dahil, Ã¶lÃ§ekleme Ã¶ncesi, NaN iÃ§eren):")
                 st.dataframe(olceklenecek_df)
                 st.info(f"Not: Ä°ndikatÃ¶r hesaplamalarÄ± iÃ§in en az {GEREKLI_GECMIS_GUN_SAYISI} gÃ¼n verisi (geÃ§miÅŸ + gÃ¼ncel) gereklidir. "
                         f"KullanÄ±lan birleÅŸtirilmiÅŸ veri {len(birlestirilmis_df)} satÄ±rdan oluÅŸuyor.")
                 st.stop()

            olceklenmis_oznitelikler_dizisi = olcekleyici.transform(olceklenecek_df)
            olceklenmis_oznitelikler_df = pd.DataFrame(olceklenmis_oznitelikler_dizisi, columns=OLCEKLEYICI_GIRIS_SUTUNLARI, index=olceklenecek_df.index)

            # --- Model iÃ§in doÄŸru Ã¶zellikleri seÃ§me gÃ¼ncellendi ---
            eksik_model_sutunlari = [sutun for sutun in RFE_SECILMIS_OZNITELIKLER if sutun not in olceklenmis_oznitelikler_df.columns]
            if eksik_model_sutunlari:
                st.error(f"Ã–lÃ§eklenmiÅŸ veride model iÃ§in beklenen Ã¶zellikler eksik: {', '.join(eksik_model_sutunlari)}")
                st.stop()

            model_icin_son_oznitelikler = olceklenmis_oznitelikler_df[RFE_SECILMIS_OZNITELIKLER]
            # --- Model iÃ§in Ã¶zellik seÃ§imi sonu ---


            tahmin = model.predict(model_icin_son_oznitelikler)
            model.predict_proba(model_icin_son_oznitelikler) # OlasÄ±lÄ±klarÄ± almak isterseniz

            st.subheader("Tahmin Sonucu")
            sutun1, sutun2 = st.columns([1,3])
            with sutun1:
                if tahmin[0] == 1:
                    st.image("https://emojigraph.org/media/apple/chart-increasing_1f4c8.png", width=100)
                else:
                    st.image("https://emojigraph.org/media/apple/chart-decreasing_1f4c9.png", width=100)
            with sutun2:
                if tahmin[0] == 1:
                    st.success("ðŸ“ˆ **YÃœKSELÄ°Åž** bekleniyor.")
                    st.markdown("Tahminimiz, yarÄ±nki Bitcoin kapanÄ±ÅŸ fiyatÄ±nÄ±n bugÃ¼nkÃ¼ kapanÄ±ÅŸ fiyatÄ±ndan **daha yÃ¼ksek** olacaÄŸÄ± yÃ¶nÃ¼ndedir.")
                else:
                    st.error("ðŸ“‰ **DÃœÅžÃœÅž** bekleniyor.")
                    st.markdown("Tahminimiz, yarÄ±nki Bitcoin kapanÄ±ÅŸ fiyatÄ±nÄ±n bugÃ¼nkÃ¼ kapanÄ±ÅŸ fiyatÄ±ndan **daha dÃ¼ÅŸÃ¼k** olacaÄŸÄ± yÃ¶nÃ¼ndedir.")
                    if hasattr(model, 'predict_proba'):
                     olasiliklar = model.predict_proba(model_icin_son_oznitelikler)
                     st.write(f"Model GÃ¼veni (YÃ¼kseliÅŸ olasÄ±lÄ±ÄŸÄ±): {olasiliklar[0][1]:.2%}")


            with st.expander("Detaylar: Modele Giren Veriler"):
                st.markdown("##### Ham Girilen Veriler (BugÃ¼n):")
                st.dataframe(guncel_df_satiri.style.format({"Open": "{:.2f}", "Close": "{:.2f}", "Volume": "{:.0f}"}))
                st.markdown(f"##### {GEREKLI_GECMIS_GUN_SAYISI} GÃ¼nlÃ¼k Veri Ãœzerinden Hesaplanan Ä°ndikatÃ¶rler (BugÃ¼n Ä°Ã§in, Ã–lÃ§ekleme Ã–ncesi):")
                st.dataframe(olceklenecek_df.style.format("{:.2f}"))
                st.markdown("##### Ã–lÃ§eklenmiÅŸ ve Model Ä°Ã§in SeÃ§ilmiÅŸ Ã–zellikler:")
                st.dataframe(model_icin_son_oznitelikler.style.format("{:.4f}"))
                # --- Caption gÃ¼ncellendi ---
                st.caption(f"Modelin kullandÄ±ÄŸÄ± Ã¶zellikler: ` {', '.join(RFE_SECILMIS_OZNITELIKLER)} `")
                # --- Caption sonu ---

        except ValueError as ve:
            st.error(f"Veri hatasÄ±: {ve}")
        except Exception as e:
            st.error(f"Tahmin sÄ±rasÄ±nda beklenmedik bir hata oluÅŸtu: {e}")
            st.error("LÃ¼tfen girdiÄŸiniz deÄŸerleri ve geÃ§miÅŸ veri dosyasÄ±nÄ±n bÃ¼tÃ¼nlÃ¼ÄŸÃ¼nÃ¼ kontrol edin.")
            import traceback
            st.text(traceback.format_exc())

st.sidebar.markdown("---")
st.sidebar.caption("Bu uygulama demo amaÃ§lÄ±dÄ±r ve yatÄ±rÄ±m tavsiyesi deÄŸildir.")

if tam_gecmis_veri is not None and not tam_gecmis_veri.empty:
    st.markdown("---")
    st.subheader(f"GeÃ§miÅŸ Veri Ã–rneÄŸi (Son 5 GÃ¼n - Toplam {len(tam_gecmis_veri)} gÃ¼n mevcut)")
    gosterilecek_df = tam_gecmis_veri[['Open', 'Close', 'Volume']].tail().reset_index(drop=True)
    st.dataframe(gosterilecek_df.style.format({"Open": "{:.2f}", "Close": "{:.2f}", "Volume": "{:.0f}"}))
else:
    st.markdown("---")
    st.warning("GeÃ§miÅŸ veri yÃ¼klenemedi veya boÅŸ.")